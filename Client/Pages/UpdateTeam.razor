@page "/update-team/{teamId:int}"
@using Project.FootballTrick.Shared.Entities
@using Newtonsoft.Json;
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Actualizar equipo</PageTitle>

<h1>Actualizar equipo</h1>

<EditForm Model="@team" OnValidSubmit="UpdateTeams">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="team.Name" />
        </div>
        <ValidationMessage For="@(() => team.Name)" />
    </div>
        <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public int teamId { get; set; }
    protected Team team = new();
    private string apiUrl = "api/team";
    protected override async Task OnParametersSetAsync()
    {
        string baseUrl = Navigation.BaseUri;
        string url = $"{baseUrl}{this.apiUrl}";

        var response = await Http.GetAsync(url);
        response.EnsureSuccessStatusCode();
        string responseBodyJson = await response.Content.ReadAsStringAsync();


        var teamsLists = JsonConvert.DeserializeObject<List<Team>>(responseBodyJson);

        team = teamsLists.Where(x => x.TeamId == teamId).FirstOrDefault();
    }
    
    protected async Task UpdateTeams()
    {
        string baseUrl = Navigation.BaseUri;
        string url = $"{baseUrl}{this.apiUrl}/{"update-team"}";

        if (team.TeamId < 1)
        {
            return;
        }

        await Http.PostAsJsonAsync(url, team);
        Navigation.NavigateTo("/teams-list");
    }

    protected async Task Cancel()
    {
        Navigation.NavigateTo("/");
    }
}
